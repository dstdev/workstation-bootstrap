---
###########################################################################
## Documentation                                                         ##
###########################################################################
# 
# Supported Operating Systems:
#   * Ubuntu 23.04
#
#  sudo apt install ansible
#  ansible-pull -K https://github.com/dstdev/workspace/playbook.yaml -i hosts
#  reboot
#
###########################################################################
- name: Install and configure DST VM
  hosts: localhost
  connection: local
  vars:
    vscode_extensions:
      - redhat.ansible
      - redhat.vscode-yaml
      - dhoeric.ansible-vault
      - GitHub.remotehub
      - jdinhlife.gruvbox
      - HashiCorp.terraform
      - ms-python.python
      - golang.Go
    required_packages:
      - git
      - curl
      - wget
      - vim
      - neovim
      - htop
      - nmap
      - rsync
      - sshfs
      - pre-commit
      - tmux
      - awscli
      - htop
      - python3-pip
      - ca-certificates
      - gnupg
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
      - pipx
      - software-properties-common
      - terraform
      - network-manager-openconnect
      - network-manager-openconnect-gnome
      - globalprotect-openconnect
      - filezilla
    pipx_molecule_packages:
      - "molecule-plugins[docker]"
    enable_vim: false
    ssh_configs: []
    docker_repo_url: https://download.docker.com/linux
    docker_apt_repository: "deb [arch=amd64] {{ docker_repo_url }}/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
    docker_apt_gpg_key: "{{ docker_repo_url }}/{{ ansible_distribution | lower }}/gpg"
    terraform_gpg_key: "https://apt.releases.hashicorp.com/gpg"
    terraform_apt_repository: " deb [arch=amd64] https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main"
    git_email: false
    git_name: false
    bitwarden_version: 2023.7.1
    ssh_rsa_private_key: false
    ssh_ed25519_private_key: false
  tasks:
    - name: Get User home directory
      ansible.builtin.shell: >
        set -o pipefail && getent passwd {{ ansible_user_id }} | awk -F: '{ print $6 }'
      changed_when: false
      args:
        executable: /usr/bin/bash
      register: user_home

    - name: Add Docker apt key
      ansible.builtin.get_url:
        url: "{{ docker_apt_gpg_key }}"
        dest: /etc/apt/trusted.gpg.d/docker.asc
        mode: "0644"
        force: true
      become: true

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "{{ docker_apt_repository }}"
        state: present
        update_cache: true
      become: true

    - name: Add Terraform apt key
      ansible.builtin.apt_key:
        url: "{{ terraform_gpg_key  }}"
        state: present
        validate_certs: false
      become: true

    - name: Add Terraform repository
      ansible.builtin.apt_repository:
        repo: "{{ terraform_apt_repository }}"
        state: present
        update_cache: true
      become: true

    - name: Add globalprotect PPA
      ansible.builtin.apt_repository:
        repo: 'ppa:yuezk/globalprotect-openconnect'
      become: true

    - name: Update Apt cache
      ansible.builtin.apt:
        update_cache: true
      become: true

    - name: Install required packages
      ansible.builtin.package:
        state: present
        name: "{{ item }}"
      become: true
      loop: "{{ required_packages }}"

    - name: Install ansible in pipx
      ansible.builtin.command: "python3 -m pipx install --include-deps ansible"
      args:
        creates: "/home/{{ ansible_user_id }}/.local/bin/ansible"

    - name: Install pipx packages
      ansible.builtin.command: "python3 -m pipx install ansible-lint"
      args:
        creates: "/home/{{ ansible_user_id }}/.local/bin/ansible-lint"

    # This is why we should reboot to make sure user is in docker group
    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        groups: docker
        append: true
      become: true

    - name: Create Projects folder for repositories
      ansible.builtin.file:
        path: Projects
        state: directory
        mode: "0755"

    - name: Install molecule in pipx
      ansible.builtin.command: "python3 -m pipx install molecule"
      args:
        creates: "/home/{{ ansible_user_id }}/.local/bin/molecule"

    - name: Install molecule pipx packages
      ansible.builtin.command: "python3 -m pipx inject molecule {{ ' '.join(pipx_molecule_packages) }}"

    # This is why we should reboot to make sure user is in docker group
    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        groups: docker
        append: true
      become: true

    - name: Create Projects folder for repositories
      ansible.builtin.file:
        path: "/home/{{ ansible_user_id }}/Projects"
        state: directory
        mode: "0755"

    - name: Install vscode deb
      ansible.builtin.apt:
        deb: https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64
      become: true

    - name: Install bitwarden deb
      ansible.builtin.apt:
        deb: "https://github.com/bitwarden/clients/releases/download/desktop-v{{ bitwarden_version }}/Bitwarden-{{ bitwarden_version }}-amd64.deb"
      become: true

    - name: Install code extensions
      ansible.builtin.command: "code --install-extension {{ item }}"
      become: false
      register: result
      changed_when: result.stdout is not search('is already installed.')
      loop: "{{ vscode_extensions }}"

    - name: Install vim extension
      ansible.builtin.command: "code --install-extension vscodevim.vim"
      become: false
      register: result
      changed_when: result.stdout is not search('is already installed.')
      when: enable_vim

    - name: Configure Git
      community.general.ini_file:
        path: "/home/{{ ansible_user_id }}/.gitconfig"
        section: user
        option: "{{ item.key }}"
        value: "{{ item.value }}"
      when: git_email and git_name
      loop:
        - key: email
          value: "{{ git_email }}"
        - key: name
          value: "{{ git_name }}"

    - name: Setup ssh
      block:
        - name: Create ssh directory
          ansible.builtin.file:
            path: "/home/{{ ansible_user_id }}/.ssh"
            state: "directory"
            mode: "0755"

        - name: Create ssh config.d directory
          ansible.builtin.file:
            path: "/home/{{ ansible_user_id }}/.ssh/config.d"
            state: "directory"
            mode: "0755"

        - name: Create ssh config file
          ansible.builtin.lineinfile:
            path: "/home/{{ ansible_user_id }}/.ssh/config"
            line: "Include config.d/*"
            create: yes
            insertbefore: "BOF"

        - name: Configure rsa private key
          ansible.builtin.copy:
            content: "{{ ssh_rsa_private_key }}"
            dest: "/home/{{ ansible_user_id }}/.ssh/id_rsa"
            mode: "0600"
          when: ssh_rsa_private_key

        - name: Configure ed25519 private key
          ansible.builtin.copy:
            content: "{{ ssh_ed25519_private_key }}"
            dest: "/home/{{ ansible_user_id }}/.ssh/id_ed25519"
            mode: "0600"
          when: ssh_ed25519_private_key

        - name: Create missing ed25519 ssh private key
          community.crypto.openssh_keypair:
            path: "/home/{{ ansible_user_id }}/.ssh/id_ed25519"

    - name: Remove system ansible
      ansible.builtin.apt:
        state: absent
        name:
          - ansible
          - ansible-core
          - ansible-lint
      become: true
