---
###########################################################################
## Documentation                                                         ##
###########################################################################
#
# Supported Operating Systems:
#   * Ubuntu 23.04
#
#  sudo apt install ansible
#  ansible-pull -K https://github.com/dstdev/workspace/playbook.yaml -i hosts
#  reboot
#
###########################################################################
- name: Install and configure DST VM
  hosts: localhost
  connection: local
  vars:
    vscode_extensions:
      - redhat.ansible
      - redhat.vscode-yaml
      - dhoeric.ansible-vault
      - GitHub.remotehub
      - jdinhlife.gruvbox
      - HashiCorp.terraform
      - ms-python.python
      - golang.Go
      - darkriszty.markdown-table-prettify
      - sumneko.lua
    required_packages:
      - awscli
      - ca-certificates
      - containerd.io
      - curl
      - docker-buildx-plugin
      - docker-ce
      - docker-ce-cli
      - docker-compose-plugin
      - filezilla
      - fzf
      - git
      - globalprotect-openconnect
      - gnupg
      - htop
      - neovim
      - network-manager-openconnect
      - network-manager-openconnect-gnome
      - nmap
      - pipx
      - pre-commit
      - python3-pip
      - rclone
      - rsync
      - software-properties-common
      - sshfs
      - terminator
      - terraform
      - tmux
      - vim
      - wget
      - x2goclient
      - zsh
    enable_vim: false
    ssh_configs: []
    docker_repo_url: https://download.docker.com/linux
    docker_apt_repository: "deb [arch=amd64] {{ docker_repo_url }}/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
    docker_apt_gpg_key: "{{ docker_repo_url }}/{{ ansible_distribution | lower }}/gpg"
    terraform_gpg_key: "https://apt.releases.hashicorp.com/gpg"
    terraform_apt_repository: " deb [arch=amd64] https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main"
    git_email: false
    git_name: false
    bitwarden_version: 2023.7.1
    ssh_rsa_private_key: false
    ssh_rsa_public_key: false
    ssh_ed25519_private_key: false
    ssh_ed25519_public_key: false
    vscode_default_settings:
      redhat.telemetry.enabled: false
      git.openRepositoryInParentFolders: "always"
      files.dialog.defaultPath: "/home/{{ ansible_user_id }}/Repos"
    vpn_connections: []
    shellrc_extra_lines: []

  tasks:
    - name: Get User home directory
      ansible.builtin.shell: >
        set -o pipefail && getent passwd {{ ansible_user_id }} | awk -F: '{ print $6 }'
      changed_when: false
      args:
        executable: /usr/bin/bash
      register: user_home

    - name: Add Docker apt key
      ansible.builtin.get_url:
        url: "{{ docker_apt_gpg_key }}"
        dest: /etc/apt/trusted.gpg.d/docker.asc
        mode: "0644"
        force: true
      become: true

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "{{ docker_apt_repository }}"
        state: present
        update_cache: true
      become: true

    - name: Add Terraform apt key
      ansible.builtin.apt_key:
        url: "{{ terraform_gpg_key }}"
        state: present
        validate_certs: false
      become: true

    - name: Add Terraform repository
      ansible.builtin.apt_repository:
        repo: "{{ terraform_apt_repository }}"
        state: present
        update_cache: true
      become: true

    - name: Add globalprotect PPA
      ansible.builtin.apt_repository:
        repo: 'ppa:yuezk/globalprotect-openconnect'
      become: true

    - name: Update Apt cache
      ansible.builtin.apt:
        update_cache: true
      changed_when: false
      become: true

    - name: Remove unattended upgrades
      ansible.builtin.apt:
        state: absent
        name: "{{ item }}"
      become: true
      loop: 
        - unattended-upgrades
        - unattended-notifier
        - update-manager

    - name: Install required packages
      ansible.builtin.package:
        state: present
        name: "{{ item }}"
      become: true
      loop: "{{ required_packages }}"

    # This is why we should reboot to make sure user is in docker group
    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        groups: docker
        append: true
      become: true

    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        groups: docker
        append: true
      become: true

    - name: Install Pipx packages
      block:
        - name: Get installed pipx packages
          ansible.builtin.command: pipx list --include-injected
          changed_when: false
          register: pipx_packages

        - name: Install ansible in pipx
          ansible.builtin.command: "python3 -m pipx install --include-deps ansible"
          args:
            creates: "/home/{{ ansible_user_id }}/.local/bin/ansible"

        - name: Install pipx packages
          ansible.builtin.command: "python3 -m pipx inject --include-apps ansible ansible-lint"
          args:
            creates: "/home/{{ ansible_user_id }}/.local/bin/ansible-lint"

        - name: Install cookiecutter in pipx
          ansible.builtin.command: "python3 -m pipx inject --include-apps ansible cookiecutter"
          args:
            creates: "/home/{{ ansible_user_id }}/.local/bin/cookiecutter"

        - name: Install molecule in pipx
          ansible.builtin.command: "python3 -m pipx inject --include-apps ansible molecule"
          args:
            creates: "/home/{{ ansible_user_id }}/.local/bin/molecule"

        - name: Install molecule plugins in pipx
          ansible.builtin.command: "python3 -m pipx inject ansible molecule-plugins[docker]"
          args:
            creates: "/home/{{ ansible_user_id }}/.local/pipx/venvs/ansible/lib/\
                     python{{ ansible_python['version']['major'] }}.{{ ansible_python['version']['minor'] }}/\
                     site-packages/molecule_plugins/__init__.py"

        - name: Install pynetbox plugins in pipx
          ansible.builtin.command: "python3 -m pipx inject ansible pynetbox pytz"
          args:
            creates: "/home/{{ ansible_user_id }}/.local/pipx/venvs/ansible/lib/\
                     python{{ ansible_python['version']['major'] }}.{{ ansible_python['version']['minor'] }}/\
                     site-packages/pynetbox/__init__.py"

        - name: Install detect secrets in pipx
          ansible.builtin.command: "python3 -m pipx install detect-secrets"
          args:
            creates: "/home/{{ ansible_user_id }}/.local/bin/detect-secrets"

        - name: Add pipx path to bashrc
          ansible.builtin.lineinfile:
            path: "/home/{{ ansible_user_id }}/.bashrc"
            line: "export PATH=\"$PATH:/home/akail/.local/bin\""
            create: true
            insertafter: "EOF"
            mode: "0755"

    # This is why we should reboot to make sure user is in docker group
    - name: Create Repos folder for repositories
      ansible.builtin.file:
        path: "/home/{{ ansible_user_id }}/Repos"
        state: directory
        mode: "0755"

    - name: Install Bitwarden
      tags:
        - bitwarden
      block:
        - name: Install bitwarden deb
          ansible.builtin.apt:
            deb: "https://github.com/bitwarden/clients/releases/download/desktop-v{{ bitwarden_version }}/Bitwarden-{{ bitwarden_version }}-amd64.deb"
          become: true

        - name: Install bitwarden cli
          become: true
          ansible.builtin.unarchive:
            src: https://vault.bitwarden.com/download/?app=cli&platform=linux
            dest: /usr/local/bin
            remote_src: true

        - name: Configure bitwarden cli
          ansible.builtin.command: "bw config server https://bw.datainscience.com"
          changed_when: false

    - name: Configure VSCode
      block:

        - name: Install vscode deb
          ansible.builtin.apt:
            deb: https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64
          become: true

        - name: Install code extensions
          ansible.builtin.command: "code --install-extension {{ item }}"
          become: false
          register: result
          changed_when: result.stdout is not search('is already installed.')
          loop: "{{ vscode_extensions }}"

        - name: Install vim extension
          ansible.builtin.command: "code --install-extension vscodevim.vim"
          become: false
          register: result
          changed_when: result.stdout is not search('is already installed.')
          when: enable_vim

        - name: Set default vscode setting
          ansible.builtin.copy:
            content: "{{ vscode_default_settings | to_json }}"
            dest: "/home/{{ ansible_user_id }}/.config/Code/User/settings.json"
            mode: "0664"
            force: false

    - name: Configure Git
      community.general.ini_file:
        path: "/home/{{ ansible_user_id }}/.gitconfig"
        section: user
        option: "{{ item.key }}"
        value: "{{ item.value }}"
        mode: "0644"
      when: git_email and git_name
      loop:
        - key: email
          value: "{{ git_email }}"
        - key: name
          value: "{{ git_name }}"

    - name: Setup ssh
      tags: ssh
      block:
        - name: Create ssh directory
          ansible.builtin.file:
            path: "/home/{{ ansible_user_id }}/.ssh"
            state: "directory"
            mode: "0755"

        - name: Create ssh config.d directory
          ansible.builtin.file:
            path: "/home/{{ ansible_user_id }}/.ssh/config.d"
            state: "directory"
            mode: "0755"

        - name: Create ssh config file
          ansible.builtin.lineinfile:
            path: "/home/{{ ansible_user_id }}/.ssh/config"
            line: "Include config.d/*"
            create: true
            insertbefore: "BOF"
            mode: "0755"

        - name: Configure rsa private key
          ansible.builtin.copy:
            content: "{{ ssh_rsa_private_key }}"
            dest: "/home/{{ ansible_user_id }}/.ssh/id_rsa"
            mode: "0600"
          when: ssh_rsa_private_key

        - name: Configure rsa public key
          ansible.builtin.copy:
            content: "{{ ssh_rsa_public_key }}"
            dest: "/home/{{ ansible_user_id }}/.ssh/id_rsa.pub"
            mode: "0600"
          when: ssh_rsa_public_key

        - name: Configure ed25519 private key
          ansible.builtin.copy:
            content: "{{ ssh_ed25519_private_key }}"
            dest: "/home/{{ ansible_user_id }}/.ssh/id_ed25519"
            mode: "0600"
          when: ssh_ed25519_private_key

        - name: Configure ed25519 public key
          ansible.builtin.copy:
            content: "{{ ssh_ed25519_public_key }}"
            dest: "/home/{{ ansible_user_id }}/.ssh/id_ed25519.pub"
            mode: "0600"
          when: ssh_ed25519_public_key

        - name: Create missing ed25519 ssh private key
          community.crypto.openssh_keypair:
            path: "/home/{{ ansible_user_id }}/.ssh/id_ed25519"
            type: ed25519
          when: not ssh_ed25519_private_key

        - name: Add extra ssh keys
          ansible.builtin.copy:
            content: "{{ item.key }}"
            dest: "/home/{{ ansible_user_id }}/.ssh/{{ item.name }}"
            mode: "0600"
          loop: "{{ extra_ssh_keys }}"

        - name: Create ssh configs
          ansible.builtin.template:
            src: templates/dstssh.j2
            dest: "/home/{{ ansible_user_id }}/.ssh/config.d/dst"
            mode: "0600"
            trim_blocks: false

    - name: Configure Shells
      block:
        - name: Add fzf to bashrc
          ansible.builtin.lineinfile:
            path: "/home/{{ ansible_user_id }}/.bashrc"
            line: "source /usr/share/doc/fzf/examples/key-bindings.bash"
            create: true
            mode: "0644"

        - name: Add fzf to zshrc
          ansible.builtin.lineinfile:
            path: "/home/{{ ansible_user_id }}/.zshrc"
            line: "source {{ item }}"
            create: true
            mode: "0644"
          loop:
            - "/usr/share/doc/fzf/examples/completion.zsh"
            - "/usr/share/doc/fzf/examples/key-bindings.zsh"

        - name: Add aliases to bashrc
          ansible.builtin.lineinfile:
            path: "/home/{{ ansible_user_id }}/.bashrc"
            line: "{{ item }}"
            create: true
            insertafter: "EOF"
            mode: "0755"
          loop: "{{ shellrc_extra_lines }}"

        - name: Add aliases to bashrc
          ansible.builtin.lineinfile:
            path: "/home/{{ ansible_user_id }}/.wzshrcashrc"
            line: "{{ item }}"
            create: true
            insertafter: "EOF"
            mode: "0755"
          loop: "{{ shellrc_extra_lines }}"


    - name: Configure AWS Credentials
      tags:
        - aws
      when: "aws_configs | length > 0 and aws_credentials | length > 0"
      block:
        - name: Create .aws directory
          ansible.builtin.file:
            path: "/home/{{ ansible_user_id }}/.aws"
            state: directory
            mode: "0700"

        - name: Create aws configuration
          community.general.ini_file:
            path: "/home/{{ ansible_user_id }}/.aws/config"
            section: "{{ item.section }}"
            option: "{{ item.option }}"
            value: "{{ item.value }}"
            mode: "0600"
          loop: "{{ aws_configs }}"

        - name: Create aws credentials
          community.general.ini_file:
            path: "/home/{{ ansible_user_id }}/.aws/credentials"
            section: "{{ item.section }}"
            option: "{{ item.option }}"
            value: "{{ item.value }}"
            mode: "0600"
          loop: "{{ aws_credentials }}"

    - name: Configure VPNS
      tags:
        - vpn
      when: "vpn_connections | length > 0"
      block:
        - name: Get VPN Status
          ansible.builtin.shell: >
            nmcli -t -f name,state connection
          register: vpnstate
          changed_when: false
          become: true

        - name: Add nmcli vpn connection
          ansible.builtin.command: "{{ item.connector }}"
          when: "item.name not in vpnstate.stdout"
          changed_when: false
          loop: "{{ vpn_connections }}"
          become: true

    - name: Remove system ansible
      ansible.builtin.apt:
        state: absent
        name:
          - ansible
          - ansible-core
          - ansible-lint
      become: true
